import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static long initing(int node, int start, int end, long [] data, long [] tree) {
        if (start == end) return tree[node] = data[start];
        return tree[node] = initing(node*2, start, (start+end)/2, data, tree) + initing(node*2+1, (start+end)/2+1, end, data, tree);
    }
    static long printing(int node, int start, int end, long target_left, long target_right, long [] tree) {
        if (start > target_right || end < target_left) return 0;
        if (target_left <= start && end <= target_right) return tree[node];
        return printing(node*2, start, (start+end)/2, target_left, target_right, tree)
                + printing(node*2+1, (start+end)/2+1, end, target_left, target_right, tree);
    }
    static long editing(int node, int start, int end, long target, long number, long [] tree) {
        if (start <= target && target <= end) {
            if (start == end) {
                long temp = number - tree[node];
                tree[node] = number;
                return temp;
            }
            long temp = editing(node*2, start, (start+end)/2, target, number, tree) + editing(node*2+1, (start+end)/2+1, end, target, number, tree);
            tree[node] += temp;
            return temp;
        }
        else return 0;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine(), " ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int K = Integer.parseInt(st.nextToken());
        long [] data = new long [N+1];
        for (int i = 1; i <= N; i++) {
            data[i] = Long.parseLong(br.readLine());
        }
        long [] tree = new long [4_000_210];
//        long [] tree = new long [210];
        initing(1, 1, N, data, tree);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < M+K; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            int type = Integer.parseInt(st.nextToken());
            long a = Long.parseLong(st.nextToken());
            long b = Long.parseLong(st.nextToken());
            if (type == 1) {
                editing(1, 1, N, a, b, tree);
//                System.out.println(Arrays.toString(tree));
            }
            else if (type == 2) {
                sb.append(printing(1, 1, N, a, b, tree) + "\n");
            }
        }
        System.out.println(sb);
    }
}
