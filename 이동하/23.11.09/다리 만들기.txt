import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class Node {
    int r, c;
    Node (int r, int c) {
        this.r = r;
        this.c = c;
    }
}
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int [] [] delta = {{0,1},{1,0},{0,-1},{-1,0}};
        int N = Integer.parseInt(br.readLine());
        int [] [] board = new int [N] [N];
        int [] [] distance = new int [N] [N];
        int [] [] belong = new int [N] [N];
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            for (int j = 0; j < N; j++) {
                board[i][j] = Integer.parseInt(st.nextToken());
                distance[i][j] = -1;
            }
        }
//        for (int [] d: distance) System.out.println(Arrays.toString(d));
        ArrayDeque<Node> q = new ArrayDeque<>();
        int index_helper = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (board[i][j] == 0) continue;
                if (distance[i][j] == 0) continue;
                index_helper++;
                ArrayDeque<Node> sub_q = new ArrayDeque<>();
                sub_q.offerLast(new Node(i, j));
                distance[i][j] = 0;
                belong[i][j] = index_helper;
                while (!sub_q.isEmpty()) {
                    Node n = sub_q.pollFirst();
                    for (int [] d : delta) {
                        int next_r = n.r + d[0];
                        int next_c = n.c + d[1];
                        if (next_r < 0 || next_r >= N || next_c < 0 || next_c >= N) continue;
                        if (belong[next_r][next_c] == 0) {
                            belong[next_r][next_c] = index_helper;
                            if (board[next_r][next_c] == 0) {
                                distance[next_r][next_c] = 1;
                                q.offerLast(new Node(next_r, next_c));
                            } else {
                                distance[next_r][next_c] = 0;
                                sub_q.offerLast(new Node(next_r, next_c));
                            }
                        } else if (index_helper != belong[next_r][next_c]) {
                            System.out.println(1);
                            return;
                        }
                    }
                }
            }
        }
//        for (int [] i : distance) System.out.println(Arrays.toString(i));
//        System.out.println();
//        for (int [] i : belong) System.out.println(Arrays.toString(i));
        int answer = Integer.MAX_VALUE;
        while (!q.isEmpty()) {
            Node n = q.pollFirst();
            for (int [] d : delta) {
                int next_r = n.r + d[0];
                int next_c = n.c + d[1];
                if (next_r < 0 || next_r >= N || next_c < 0 || next_c >= N) continue;
                if (belong[next_r][next_c] == 0) {
                    belong[next_r][next_c] = belong[n.r][n.c];
                    distance[next_r][next_c] = distance[n.r][n.c] + 1;
                    q.offerLast(new Node(next_r, next_c));
                } else {
                    if (belong[next_r][next_c] == belong[n.r][n.c]) continue;
                    else {
                        answer = Math.min(answer, distance[n.r][n.c] + distance[next_r][next_c]);
                    }
                }
            }
        }
        System.out.println(answer);
    }
}
